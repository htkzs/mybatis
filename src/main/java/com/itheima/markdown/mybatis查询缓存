两级缓存:—级缓存:(本地缓存) sqlSession级别的缓存。一级缓存是一直开启的;sqlSession级别的一个Map
    与数据库同一次会话期间查询到的数据会放在本地缓存中。
    以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库;
    一级缓存失效情况（没有使用到当前一级缓存的情况，效果就是，还需要再向数据库发出查询):
           1.sqlSession不同。
           2.同一个sqlSession，但是查询条件不同
           3.sqlSession相同，两次查询之间执行了增删改操作这次增删改可能对当前数据有影响)
           4.手动清除一级缓存 sqlSession.clearCache();
二级缓存:(全局缓存)
    二级缓存，(全局缓存)﹔基于namespace级别的缓存:
    1、一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中;
    2、如果会话关闭;一级缓存中的数据会被保存到二级缓存中﹔新的会话查询信息，就可以参照二级缓存中的信息。
    3、sqlSession===EmployeeMapper==>Employee
       DepartmentMapper===>Department
    不同namespace查出的数据会放在自己对应的缓存中(map)
    效果:数据会从二级缓存中获取
                查出的数据都会被默认先放在一级缓存中。
                只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中
1.全局文件中开启二级缓存
<setting name="cacheEnabled" value="true"/>
去mapper.xml中配置使用二级缓存:<cache></cache>
             <cache eviction="" flushInterval="" readOnly="" size="" type="" blocking=""/>
             eviction:缓存的回收策略:
             · LRU  -最近最少使用的:移除最长时间不被使用的对象。
             · FIFO -先进先出:按对象进入缓存的顺序来移除它们。
             . SOFT -软引用:移除基于垃圾回收器状态和软引用规则的对象。
             · WEAK -弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。
             · 默认的是 LRU。
             flushInterval:缓存刷新间隔
             缓存多长时间清空一次，默认不清空，设置一个毫秒值read0nly:是否只读:
             true:只读;mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
             mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
             false:非只读: mybatis觉得获取的数据可能会被修改。
             mybatis会利用序列化&反序列的技术克隆一份新的数据给你。
             缓存多长时间清空一次，默认不清空，设置一个毫秒值read0nly:是否只读:

             size:缓存存放多少元素;
             type="":指定自定义缓存的全类名;实现Cache接口即可;
实现序列化接口
和缓存有关的设置/属性:
1)、cacheEnabled=true: false:关闭缓存（二级缓存关闭)(一级缓存任然有效)
2)、每个select标签都有useCache="true".false:不使用缓存(—级缓存依然使用,二级缓存关闭）
3)、每个增册改标签的:flushCache="true";增删改执行完成后就会清除缓存  测试:flushCache="true":一级缓存就清空了;二级也全被清除;
    查询标签:flushCache="false":如果flushCaehe=true;每次查询之后都会清空缓存;
4)、sqlsession.clearCache();识是清楚当前session的一级缓存;
5)、localcacheScope:本地缓存作用域:(一级缓存SESSION)﹔当前会话的所有数据保存在会话缓存中;
         STATEMENT:可以禁用一级缓存,

