<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itheima.mapper.DynamicSqlMapper">
    <!--引入缓存和UserMapper使用的缓存保持一致-->
<!--    <cache-ref namespace="com.itheima.mapper.UserMapper"/>-->
    <!--批量保存方法-->
    <insert id="saveBatchPerson" parameterType="list">
        insert into person(no,name,age,height,address_id) values
        <foreach collection="persons" item="person" separator=",">
            (#{person.no},#{person.name},#{person.age},#{person.height},#{person.address.addressId})
        </foreach>
    </insert>
    <!--批量插入的第二中方式  每次循坏一个完整的SQL中间用 ; 隔开-->
    <insert id="saveBatchPersonForMultiSql" parameterType="list">
        <foreach collection="persons" item="person" separator=";">
            insert into person(no,name,age,height,address_id) values (#{person.no},#{person.name},#{person.age},#{person.height},#{person.address.addressId})
        </foreach>
    </insert>
    <!--oracle支持的批量插入操作-->
    <insert id="saveBatchPersonForMultiSqlWithOracle" parameterType="list">
           <foreach collection="persons" item="person" separator=";" open="begin" close="end;">
               insert into person(no,name,age,height,address_id) values (person_sql.nextval,#{person.name},#{person.age},#{person.height},#{person.address.addressId})
           </foreach>
    </insert>
    <update id="updatePersonByConditionBySet">
    <!--使用set标签可能导致出现多余的逗号 可以使用trim标签做优化-->
<!--        update person-->
<!--        <set>-->
<!--            <if test="name !=null and name!=''">-->
<!--                name = #{name},-->
<!--            </if>-->
<!--            <if test="age !=null">-->
<!--                age = #{age},-->
<!--            </if>-->
<!--            <if test="height !=null">-->
<!--                height = #{height}-->
<!--            </if>-->
<!--            where no=#{no}-->
<!--        </set>-->
        update person
        <trim prefix="set" suffixOverrides=",">
            <if test="name !=null and name!=''">
                name = #{name},
            </if>
            <if test="age !=null">
                age = #{age},
            </if>
            <if test="height !=null">
                height = #{height}
            </if>
            where no=#{no}
        </trim>
    </update>
    <!--select * from person where no=? and name like ? and age=?-->
    <select id="queryPersonByCondition" resultType="com.itheima.entity.Person" parameterType="com.itheima.to.PersonTo">
        select * from person
        <!--遇见特殊符号应该去写转义字符:
        查询的时候如果某些条件没带可能sql拼装会有问题
        1、给where后面加上1=1，以后的条件都and xxX
        2、mybatis使用where标签来将所有的查询条件包括在内
        mybatis就会将where标签中拼装的sql，多出来的and或者or去掉,where只会去掉前面的and ，如果将and写在 name like #{name} and
        就会发生错误，所以使用where时将and写在条件前面
        &&: &amp;   '' : &quot;-->
        <where>
            <if test="no!=null">
                no=#{no}
            </if>
            <if test="name != null and name != ''">
                and name like #{name}
            </if>
            <if test="age==23 and height>=172" >
                and age = #{age}
            </if>
        </where>
    </select>
    <select id="queryPersonByConditionByTrim" resultType="com.itheima.entity.Person" parameterType="com.itheima.to.PersonTo">
        select * from person
        <!--后面多出的and或者or where标签不能解决
                prefix="":前缀:trim标签体中是整个字符串拼串后的结果。
                          prefix给拼串后的整个字符串加一个前缀
                prefixOverrides="":
                          前缀覆盖:去掉整个字符串前面多余的字符
                suffix="“:后缀
                          suffix给拼串后的整个字符串加一个后缀
                suffixOverrides=""
                          后缀覆盖:去掉整个字符串后面多余的字符-->
        <trim prefix="where" suffixOverrides="and">
            <if test="no!=null">
                no=#{no} and
            </if>
            <if test="name != null and name != ''">
                name like ${name} and
            </if>
            <if test="age==23 and height>=172" >
                age = #{age}
            </if>
        </trim>
    </select>
    <!--choose (when, otherwise):分支选择;
       带了break的swtich-case
       如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个
   -->
    <select id="queryPersonByConditionByChoose" resultType="com.itheima.entity.Person" parameterType="com.itheima.to.PersonTo">
        select * from person
        <where>
            <choose>
                <when test="no != null">
                    no = #{no}
                </when>
                <when test="name!= null and name!=''">
                    name like #{name}
                </when>
                <otherwise>
                    age = #{age}
                </otherwise>
            </choose>
        </where>
    </select>
    <select id="queryPersonWithBatchByIds" resultType="com.itheima.entity.Person" parameterType="java.lang.Integer">
        select * from person where no in(#{ids[0]},#{ids[1]},#{ids[2]});
    </select>
    <!--collection:指定要遍历的集合:
       list类型的参数会特殊处理封装在map中,map的key就叫list
       item:将当前遍历出的元素赋值给指定的变量
       separator :每个元素之间的分隔符
       open:遍历出所有结果拼接一个开始的字符
       close:遍历出所有结果拼接一个结束的字符
       index:索引。
       遍历list的时候是index就是索引， item就是当前值
       遍历map的时候index表示的就是map的key. item就是map的值
       #{变量名}就能取出变量的值也就是当前追历出的元素
    -->
    <select id="queryPersonWithBatchByIdsForeach" resultType="com.itheima.entity.Person" parameterType="java.util.Map">
        select * from person where no in
        <!--如果对参数没有指定别名时 就必须使用 collection="list"-->
        <foreach collection="list" item="no" open="(" close=")" separator=",">
            #{no}
        </foreach>
    </select>

    <select id="queryPersonWithBatchByIdsForeachTransformMap" resultType="com.itheima.entity.Person" parameterType="map">
        select * from person where no in
        <!--如果对参数没有指定别名时 就必须使用 collection="map"-->
        <foreach collection="map" item="no" open="(" close=")" separator="," index="i">
            #{no}
        </foreach>
    </select>
    <!--List<Person> MyBatisInnerParameter(@Param("person") Person person);-->
    <select id="MyBatisInnerParameter" resultType="com.itheima.entity.Person" parameterType="com.itheima.entity.Person">
        <!-- bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值-->
        <bind name="_name" value="'%'+#{name}+'%'"/>
        <if test="_databaseId == 'mysql'">
             select* from person
              <if test="_parameter !=null">
                  <!--这里的_parameter就是传递过来的person对象 若要使用_parameter 方法传递参数时就不能使用@Param起别名
                  否则报 org.apache.ibatis.binding.BindingException: Parameter 'name' not found. Available parameters are [person, param1] 异常
                  -->
                  where name =#{_parameter.name}
              </if>
         </if>
        <if test="_databaseId == 'oracle'">
            select* from person
            <if test="parameter !=null ">
                where name =#{_parameter.name}
            </if>
        </if>
    </select>
    <!--使用bind标签进行模糊查询-->
    <select id="MyBatisInnerParameterWithBind" resultType="com.itheima.entity.Person" parameterType="com.itheima.entity.Person">
        <!-- bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值-->
        <bind name="_name" value="'%'+name+'%'"/>
        <if test="_databaseId == 'mysql'">
            select no,name,age,height from person
<!--            <include refid="columnRows">-->
<!--                <property name="columnPrefix" value="helloWorld"/>-->
<!--            </include>-->

            <if test="_parameter !=null">
                where name like #{_name}
            </if>
        </if>
        <if test="_databaseId == 'oracle'">
            select* from person
            <if test="parameter !=null ">
                where name =#{_parameter.name}
            </if>
        </if>

    </select>
    <!--
        抽取可重用的sql片段。方便后面引用
        1、sql抽取:经常将要查询的列名，或者插入用的列名抽取出来方便引用
        2、include来引用已经抽取的sgl:
        3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
        ${prop}
    -->
    <sql id="columnRows">
        <if test="_databaseId == 'mysql'">
            on,name,age,height
        </if>
        <if test="_databaseId == 'oracle'">
            on,name,age,height
        </if>

    </sql>

</mapper>